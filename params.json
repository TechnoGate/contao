{"google":"UA-24079929-5","name":"Contao","tagline":"Contao Integration with Rails Asset Pipeline, Compass and Capistrano","body":"# Contao\r\n\r\nWelcome to Contao!\r\n[![Build\r\nStatus](https://secure.travis-ci.org/TechnoGate/contao.png?branch=master)](http://travis-ci.org/TechnoGate/contao)\r\n[![Gemnasium](https://gemnasium.com/TechnoGate/contao.png)](https://gemnasium.com/TechnoGate/contao)\r\n\r\nThis gem will help you to quickly develop a website using [Contao\r\nCMS](http://www.contao.org/en/) which has pre-built support for\r\n[Sass](http://sass-lang.com), [Compass](http://compass-style.org),\r\n[CoffeeScript](http://coffeescript.org),\r\n[Jasmine](http://pivotal.github.com/jasmine/) and\r\n[Capistrano](https://github.com/capistrano/capistrano).\r\n\r\nIt also feature hashed assets served by the [Contao Assets\r\nextension](https://github.com/TechnoGate/contao_assets), which allows you\r\nto have an md5 appended to each of your assets URL on the production\r\nsite.\r\n\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/resources/application-c6e2457d9ccce0f344c50e5bcc12fcdc.css\" />\r\n<script type=\"text/javascript\" src=\"/resources/application-327af3660470fb1c3f8e6593670cfc1e.js\"></script>\r\n```\r\n\r\nAll the images references by the CSS file, are also hashed, so when you\r\ndeploy a new version of your image and/or your CSS, you are absolutely\r\nsure that your visitors do not get a cached copy of your old asset.\r\n\r\n```sass\r\ndiv\r\n  +background(image-url('body.jpg') no-repeat top center)\r\n```\r\n\r\nWould generate:\r\n\r\n```css\r\ndiv {\r\n  background: url(/resources/body-fc4a0f5f0b0f9ceec32bde5d15928467.jpg) no-repeat top center;\r\n}\r\n```\r\n\r\nCompass gives great power over your CSS, one most-wanted feature is the\r\nsprites, so having one PNG file for all your backgrounds is just\r\nawesome, the generate CSS looks like this\r\n\r\n```sass\r\ndiv\r\n  +background(sprite($background, body))\r\n```\r\n\r\nWould generate:\r\n\r\n```css\r\ndiv {\r\n  background: url(/resources/background-sbd69a8307b-a00c8f7a8536397c6279726316eae16f.png) 0 -3089px;\r\n}\r\n```\r\n\r\nCheck [Compass Sprites\r\nDocumentation](http://compass-style.org/help/tutorials/spriting)\r\n\r\nFinally, the integration with Capistrano allows you to quickly deploy,\r\ncopy assets, import database and even upload media such as images and\r\nPDFs all from the command line using Capistrano.\r\n\r\n## Pre-requisites\r\n\r\nBefore installing the gem, you need to make you are running on a Ruby\r\nversion 1.9.2 or greater as this Gem and most of it's dependencies do\r\nnot support Ruby 1.8, to check the version you are running, using the\r\nfollowing command:\r\n\r\n```bash\r\nruby --version\r\n```\r\n\r\nIf you're running a ruby version below 1.9, please install a 1.9 version\r\nby following the guide at the [Rbenv\r\nInstaller](https://github.com/fesplugas/rbenv-installer) project.\r\n\r\nContao depends on Qt (for headless javascript testing using\r\n[jasmine](https://github.com/pivotal/jasmine) and\r\n[jasmine-headless-webkit](http://johnbintz.github.com/jasmine-headless-webkit),\r\nto install it, refer to [Capybara Webkit\r\nInstallation](https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit)\r\n\r\n## Installation\r\n\r\nInstall contao with the following command\r\n\r\n```ruby\r\ngem install contao\r\n```\r\n\r\nDon't forget to run `rbenv rehash` if you are using\r\n**[rbenv](https://github.com/sstephenson/rbenv)** as this gem provides\r\nan executable.\r\n\r\n## Database name\r\n\r\nLocally, the database name is the same as the application name, so if\r\nyou named your project is named **my_project**, the database name will be\r\nnamed **my_project**.\r\n\r\nOn the server, Capistrano will append the environment on which the\r\ndeployment occured (check the deployment section below for more\r\ninformation) to the application name, so if your project is named\r\n**my_project** and you are deployment to the staging environment, the\r\ndatabase name would default to **my_project_staging**\r\n\r\n## Usage\r\n\r\n### Generating a config file\r\n\r\nTo start using contao, you need to generate a config file, issue the\r\ncommand\r\n\r\n```bash\r\ncontao generate config\r\n```\r\n\r\nand follow the on-screen instructions.\r\n\r\n### Generate a new project\r\n\r\nGenerating a new project is very easy, just use the following command:\r\n\r\n```bash\r\ncontao new /path/to/my_project\r\n```\r\n\r\nThis command will generate an application called `my_project` in the\r\nfolder `/path/to`, the application name is very important as it defaults\r\nto the name of your database, check the [Database name](#database-name)\r\nsection below for more information.\r\n\r\n### Initialising the project\r\n\r\nOnce the project generator has completed, cd into the newsly created\r\nproject and bootstrap contao by running\r\n\r\n```bash\r\nbundle exec rake contao:bootstrap\r\n```\r\n\r\nNow visit `/contao/install.php` or just visit the website and you should\r\nbe redirected to the Installation script, from here on it is the usual\r\nContao installation procedure, please check [Contao's user\r\nguide](http://www.contao.org/en/installing-contao.html#install-tool) for\r\ndetailed information\r\n\r\n### Work on the project\r\n\r\nTo be able to develop with this version of Contao, you first need to\r\nunderstand how it actually works, take a look at the [project\r\nstructure](#project-structure) for more information on how files are\r\norganised\r\n\r\nContao is integrated with Rails, actually only the asset pipeline\r\nfunctionality is being used, Compass is also integrated with the project\r\nso you can develop your CSS using Compass functions and mixins as well\r\nas sprites.\r\n\r\nTo start working on the project, you need to run the rails server by\r\nrunning\r\n\r\n```bash\r\nbundle exec foreman start\r\n```\r\n\r\nThis will start a rails process on port **9876** and serve the assets\r\nfrom their, The [Contao Assets\r\nExtension](https://github.com/TechnoGate/contao_assets) automatically\r\ndetect that you are running in development and will use assets from the\r\nrails server directly.\r\n\r\n## Deploying\r\n\r\n### Introduction\r\n\r\nBefore deploying the project, you need to edit Capistrano config files\r\nlocated at `config/deploy.rb` and `config/deploy/development.rb`.\r\n\r\nFor a standard project tracked by [Git](http://git-scm.com), you do not\r\nneed to edit the file `config/deploy.rb` but you **do need** to edit\r\n`config/deploy/development.rb` which is auto-documented.\r\n\r\n### Multistage\r\n\r\nCapistrano comes with support for multiple stages, you could have\r\n`development`, `staging`, `production` or any other stage, all you need\r\nto have is the stage name mentioned in `config/deploy.rb`\r\n\r\n```ruby\r\nset :stages, ['development', 'staging', 'production']\r\n```\r\n\r\nand a config file by the same name of the stage located at\r\n`config/deploy/`, the Template is pre-configured for **development**,\r\n**staging** and **production** but comes with only one config file\r\nfor **development**, to configure another stage just duplicate the\r\n**development** file to the desired stage.\r\n\r\n### Deploying\r\n\r\n#### Provisioning the server\r\n\r\nTo deploy your project, you need to first configure the server, if you\r\nare deploying to a server managed by yourself and using **Nginx**\r\n(Apache templates will be added later), you can generate a config file\r\nfor your new site, add a user to the database and create the database\r\nusing the following command:\r\n\r\n```shell\r\nbundle exec cap development deploy:server:setup\r\n```\r\n\r\nThe above step is optional and only useful if you manage your own\r\nserver, but if you are using a shared server (Hosting), running that\r\ncommand would not be possible as you don't have root access.\r\n\r\nNOTE: This command must be used only once per stage per project.\r\n\r\n#### Setup the project\r\n\r\nBefore deploying you need to setup the project structure, generate the\r\n**localconfig.php**, and the **.htaccess**, to do that just run\r\n\r\n```shell\r\nbundle exec cap development deploy:setup\r\n```\r\n\r\nNOTE: This command must be used only once per stage per project.\r\n\r\n#### Deploy the project\r\n\r\nTo deploy the project simply run\r\n\r\n```shell\r\nbundle exec cap development deploy\r\n```\r\n\r\n#### Multistage\r\n\r\nAs you may have noticed, all the above commands had the **development**\r\nstage as the first argument (first argument to **cap**), to deploy to\r\nany other stage just use that stage's name instead.\r\n\r\nThe contao template comes pre-configured with **development** as the\r\n**default stage**\r\n\r\n```ruby\r\nset :default_stage, :development\r\n```\r\n\r\nSo if you omit the stage (the first argument) when calling **cap**\r\n\r\n```shell\r\nbundle exec cap deploy\r\n```\r\n\r\nThe stage would be set to whatever `default_stage` is set to, in this\r\ncase **development**\r\n\r\n## Useful Capistrano Tasks\r\n\r\n### Database import/export\r\n\r\nYou do not need to use SSH or phpMyAdmin to export or import a database\r\ndump, in fact capistrano already knows the credentials to access the\r\ndatabase, so We added a few tasks to help ease this process.\r\n\r\n#### Importing a database dump\r\n\r\nTo import a database dump, which is very useful for deploying a website\r\nthat was in development on your localhost, you can use the task\r\n`db:import` (Remember that all the following commands can\r\noptionally take the stage as the first argument, when omited the stage\r\nis set to the `default_stage`). To import `/path/to/project.sql` for\r\nexample, you only have to use the command\r\n\r\n```shell\r\nbundle exec cap db:import /path/to/project.sql\r\n```\r\n\r\nThe above command will first backup your database on the server (check\r\n`/backups` relative to your project directory of course), and then\r\nimport the project.sql into it, however it's up to you to make sure your\r\nSQL dump file has `DROP TABLE IF EXISTS` statements to overwrite the\r\ntables.\r\n\r\n#### Exporting a database dump\r\n\r\nTo export a database dump, which is very useful to import changes from\r\nthe server to your local development machine\r\n\r\n```shell\r\nbundle exec cap db:export\r\n```\r\n\r\nThis file will download the SQL dump file to a random file in `/tmp` but\r\nyou can optionally give it an argument which would be used as a\r\nfilename. This command will also backup the database on the server.\r\n\r\n### Content import/export\r\n\r\n#### Importing content\r\n\r\nTODO: Write this section.\r\n\r\n#### Exporting content\r\n\r\nTODO: Write this section.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Added some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\nOr\r\n\r\n[![Click here to lend your support to: Open Source Projects and make a donation at www.pledgie.com!](http://pledgie.com/campaigns/16123.png?skin_name=chrome)](http://www.pledgie.com/campaigns/16123)\r\n\r\n## Contact\r\n\r\nFor bugs and feature request, please use __Github issues__, for other\r\nrequests, you may use:\r\n\r\n- Email: [contact@technogate.fr](mailto:contact@technogate.fr)\r\n\r\nDon't forget to follow me on [Github](https://github.com/eMxyzptlk) and\r\n[Twitter](https://twitter.com/eMxyzptlk) for news and updates.\r\n\r\n## Credits\r\n\r\nI'd like to give a special thanks to the guys at [Agence\r\nDurable](http://www.agence-durable.com) for supporting and testing this\r\nproject, [Leo Feyer](https://github.com/leofeyer) for creating an\r\nawesome and easy to use CMS, and of course all Contao contributors, and\r\nFinally The [Rails Core Team](http://rubyonrails.org/core) and the\r\nentire Ruby community which are simply **awesome**.\r\n\r\n## TODO\r\n\r\n* The `contao` folder is a mess and can become a lot messier pretty\r\n  quickly so we need to extract each extension into it's folder (make it\r\n  modularized)\r\n* Add Capistrano tasks for Starting/Stopping/Reloading Nginx\r\n* Add Capistrano support for Apache\r\n* The install password should be different for each website and the\r\n  developer should be able to modify it, Basically the install password\r\n  in `~/.contao/config.yml` should be stored in clear-text (or encrypted\r\n  but decryptable), and once we generate a new project we should generate\r\n  a new salt, store it in an initializer, generate the install password\r\n  and store it in an initializer as well\r\n* A new rake task should be created to help the user easly modify the\r\n  install password\r\n* The **encryption_key** should be generated for each project and not\r\n  stored in the `~/.contao/config.yml`\r\n* The assets takes a considerably amount of time to be uploaded,\r\n  specially if you have many images, we should compress the entire\r\n  folder, upload it and then extract it on the server, as it would be\r\n  much faster to upload one file.\r\n\r\n## Project structure\r\n\r\n```shell\r\ncontao_template\r\n├── Capfile\r\n├── Gemfile\r\n├── Procfile\r\n├── Rakefile\r\n├── app\r\n│   └── assets\r\n│       ├── images\r\n│       ├── javascripts\r\n│       │   └── application.js\r\n│       └── stylesheets\r\n│           ├── application.css.sass\r\n│           ├── definitions\r\n│           │   ├── _all.sass\r\n│           │   ├── _mixins.sass\r\n│           │   ├── _sprites.sass\r\n│           │   └── _variables.sass\r\n│           └── thirdparty\r\n│               └── _pie.sass\r\n├── config\r\n│   ├── application.rb\r\n│   ├── boot.rb\r\n│   ├── compass.rb\r\n│   ├── deploy\r\n│   │   ├── development.rb\r\n│   │   └── production.rb\r\n│   ├── deploy.rb\r\n│   ├── environment.rb\r\n│   ├── environments\r\n│   │   ├── development.rb\r\n│   │   ├── production.rb\r\n│   │   └── test.rb\r\n│   ├── examples\r\n│   │   └── localconfig.php.erb\r\n│   ├── initializers\r\n│   │   ├── secret_token.rb\r\n│   │   └── session_store.rb\r\n│   └── routes.rb\r\n├── config.ru\r\n├── contao\r\n│   ├── plugins\r\n│   ├── system\r\n│   │   ├── drivers\r\n│   │   ├── libraries\r\n│   │   │   ├── Spyc.php -> ../../../lib/contao/libraries/spyc/spyc.php\r\n│   │   └── modules\r\n│   │       ├── BackupDB\r\n│   │       ├── assets\r\n│   │       ├── efg\r\n│   │       ├── favicon\r\n│   │       ├── googleanalytics\r\n│   │       ├── listing\r\n│   │       ├── parentslist\r\n│   │       ├── subcolumns\r\n│   │       ├── template-override\r\n│   │       ├── videobox\r\n│   │       └── videobox_vimeo\r\n├── lib\r\n│   ├── assets\r\n│   │   └── javascripts\r\n│   │       ├── form_default_values\r\n│   │       │   ├── autoload.js.coffee\r\n│   │       │   └── main.js.coffee\r\n│   │       ├── form_default_values.js\r\n│   │       └── slider.js.coffee\r\n│   ├── contao\r\n│   │   └── libraries\r\n│   │       └── spyc\r\n│   └── tasks\r\n├── public\r\n├── script\r\n│   └── rails\r\n├── spec\r\n│   └── javascripts\r\n│       ├── fixtures\r\n│       │   └── slider.html\r\n│       ├── helpers\r\n│       │   └── spec_helper.js.coffee\r\n│       ├── slider_spec.coffee\r\n│       └── support\r\n│           └── jasmine.yml\r\n└── vendor\r\n    └── assets\r\n        ├── javascripts\r\n        └── stylesheets\r\n```\r\n\r\n\r\n## License\r\n\r\n### This code is free to use under the terms of the MIT license.\r\n\r\nCopyright (c) 2011 TechnoGate &lt;support@technogate.fr&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}